{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNXJKSQB7mW9SgX3aljuS6i"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":949},"id":"inuqXJh1-NoK","executionInfo":{"status":"ok","timestamp":1701315661847,"user_tz":-540,"elapsed":1788,"user":{"displayName":"Hikaru HIROBE","userId":"01115894803071958827"}},"outputId":"13b31847-4b73-4114-d731-1d412b30cc2e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Files already downloaded and verified\n","Data Type: torch.float32\n","Shape: torch.Size([1, 3, 32, 32])\n","Shape: torch.Size([3, 32, 32])\n","Label: 6\n","Image Data:\n","tensor([[[0.2314, 0.1686, 0.1961,  ..., 0.6196, 0.5961, 0.5804],\n","         [0.0627, 0.0000, 0.0706,  ..., 0.4824, 0.4667, 0.4784],\n","         [0.0980, 0.0627, 0.1922,  ..., 0.4627, 0.4706, 0.4275],\n","         ...,\n","         [0.8157, 0.7882, 0.7765,  ..., 0.6275, 0.2196, 0.2078],\n","         [0.7059, 0.6784, 0.7294,  ..., 0.7216, 0.3804, 0.3255],\n","         [0.6941, 0.6588, 0.7020,  ..., 0.8471, 0.5922, 0.4824]],\n","\n","        [[0.2431, 0.1804, 0.1882,  ..., 0.5176, 0.4902, 0.4863],\n","         [0.0784, 0.0000, 0.0314,  ..., 0.3451, 0.3255, 0.3412],\n","         [0.0941, 0.0275, 0.1059,  ..., 0.3294, 0.3294, 0.2863],\n","         ...,\n","         [0.6667, 0.6000, 0.6314,  ..., 0.5216, 0.1216, 0.1333],\n","         [0.5451, 0.4824, 0.5647,  ..., 0.5804, 0.2431, 0.2078],\n","         [0.5647, 0.5059, 0.5569,  ..., 0.7216, 0.4627, 0.3608]],\n","\n","        [[0.2471, 0.1765, 0.1686,  ..., 0.4235, 0.4000, 0.4039],\n","         [0.0784, 0.0000, 0.0000,  ..., 0.2157, 0.1961, 0.2235],\n","         [0.0824, 0.0000, 0.0314,  ..., 0.1961, 0.1961, 0.1647],\n","         ...,\n","         [0.3765, 0.1333, 0.1020,  ..., 0.2745, 0.0275, 0.0784],\n","         [0.3765, 0.1647, 0.1176,  ..., 0.3686, 0.1333, 0.1333],\n","         [0.4549, 0.3686, 0.3412,  ..., 0.5490, 0.3294, 0.2824]]])\n","On GPU: False\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["import numpy as np\n","import torch\n","import torchvision\n","import torchvision.transforms as transforms\n","import matplotlib.pyplot as plt\n","\n","# データの前処理\n","transform = transforms.Compose([\n","    transforms.ToTensor(),\n","])\n","# torchvision.datasets.CIFAR10 で、transform (データ型を決める)を設定する。\n","# それを前もって書いている。可読性のため\n","\n","# CIFAR-10データセットのダウンロードとロード\n","cifar10_dataset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)\n","dataloader = torch.utils.data.DataLoader(cifar10_dataset, batch_size=1, shuffle=False)\n","# データをダウンロードし（データ型はtransformsを用いている）dataloader にロードしている。\n","# ロードでは、バッチサイズを１にして、シャッフルをオフにして、１枚目の画像だけを取り出す準備。\n","\n","# 1枚目の画像を取得\n","for images, labels in dataloader:\n","    break  # 最初のミニバッチだけ取得、よって一枚のみ。\n","\n","# 画像についての情報を表示\n","print(f\"Data Type: {images.dtype}\")\n","print(f\"Shape: {images.shape}\")\n","print(f\"Shape: {images[0].shape}\") # 1つだけ取り出すと、3次元\n","\n","# ラベルの表示\n","print(f\"Label: {labels.item()}\")\n","\n","# 画像の中身の数値を表示\n","print(\"Image Data:\")\n","print(images[0])\n","\n","# もしGPUを使用している場合、データがGPU上にあることも確認します\n","print(f\"On GPU: {images.is_cuda}\")\n","\n","\n","# matplotlibを使用して画像を表示（オブジェクト指向）\n","fig, ax = plt.subplots()\n","img = images[0]\n","# print(img.dtype) 出力結果→ torch.float32\n","npimg = img.numpy() # 対応データ型に変換\n","ax.imshow(np.transpose(npimg, (1, 2, 0))) # (rows, cols, 3) に並べ直し\n","\n","\"\"\"\n","imshow\n","image の指定方法、次の形状の配列に対応しています。\n","(M, N): カラーマップを適用して表示する\n","(M, N, 3): RGB 値として解釈して表示する ←今回はこれ！\n","(M, N, 4): RGBA 値として解釈して表示する\n","形状が (M, N, 3) または (M, N, 4) の場合、各画素は\n","[0,1] の float 型または [0,255] の int 型である必要があります。範囲外の値はこの範囲にクリップした上で表示されます。\n","\"\"\"\n","\n","# グラフの設定\n","ax.set_title(\"CIFAR-10 Image\")\n","ax.set_axis_off()\n","\n","# 画像を表示\n","plt.show()"]},{"cell_type":"code","source":[],"metadata":{"id":"JAuY0i41khrE"},"execution_count":null,"outputs":[]}]}